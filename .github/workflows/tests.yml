name: Pytest

on:
  push:
    branches:
      - "**"

jobs:
  run-tests:
    runs-on: ubuntu-latest

    strategy:
        matrix:
            python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install requirements
        run: pip install pytest pytest-cov

      - name: Run tests
        id: test
        run: pytest

      - name: Store test result for ${{ matrix.python-version }}
        id: result
        run: |
          echo "Test outcome for Python ${{ matrix.python-version }}: ${{ steps.test.outcome }}"
        continue-on-error: true

      - name: Save result
        run: |
          version="${{ matrix.python-version }}"
          version_key="${version//./_}"  # Replace dot with underscore
          echo "::set-output name=test_outcome_$version_key::${{ steps.test.outcome }}"
        id: save-result

  update-badges:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create and update badges
        run: |
          versions=("3.9" "3.10" "3.11" "3.12")

          for version in "${versions[@]}"; do
            if [[ "$version" == "3.9" ]]; then
              result="${{ needs.run-tests.outputs['test_outcome_3_9'] }}"
            elif [[ "$version" == "3.10" ]]; then
              result="${{ needs.run-tests.outputs['test_outcome_3_10'] }}"
            elif [[ "$version" == "3.11" ]]; then
              result="${{ needs.run-tests.outputs['test_outcome_3_11'] }}"
            elif [[ "$version" == "3.12" ]]; then
              result="${{ needs.run-tests.outputs['test_outcome_3_12'] }}"
            fi

            if [[ "$result" == "success" ]]; then
              echo "Generating PASS badge for Python $version"
              curl https://img.shields.io/badge/Python%20$version-Pass-brightgreen.svg > python${version}_pass.svg
              sed -i 's|!\[Python $version.*|![Python $version](./python${version}_pass.svg)|g' README.md
            else
              echo "Generating FAIL badge for Python $version"
              curl https://img.shields.io/badge/Python%20$version-Fail-red.svg > python${version}_fail.svg
              sed -i 's|!\[Python $version.*|![Python $version](./python${version}_fail.svg)|g' README.md
            fi
          done

      - name: Commit and Push Badge Updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md python*_pass.svg python*_fail.svg
          git commit -m "chore: update badges for all Python versions"
          git push